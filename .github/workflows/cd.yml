name: CD (Continuous Deploy)

on:
  repository_dispatch:
    types: [FRONTEND_TEST_FINISH_TRIGGER]

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    # 의존성 캐싱
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install

    - name: Create .env.production for Docker Build
      run: |
        echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

    - name: Build Next.js app
      run: npm run build

    - name: Configure Docker
      uses: docker/setup-buildx-action@v1

    # Docker 이미지 캐싱 설정
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Set GITHUB_USERNAME environment variable
      run: echo "GITHUB_USERNAME=${{ github.actor }}" >> $GITHUB_ENV

    - name: Add Github Actions IP to Security group
      continue-on-error: true
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    # Docker 빌드와 푸시에 캐시 사용
    - name: Build and Push Docker image (No Cache)
      run: |
        docker buildx build --no-cache \
                            --platform linux/arm64 \
                            -f Dockerfile \
                            -t ghcr.io/${{ github.actor }}/nextjs-app:latest \
                            --push .

  deploy:
    needs: build
    name: Deploy to AWS EC2
    runs-on: [ self-hosted, deploy-si-follow-frontend ]
    steps:

    - name: Get GitHub Actions IP
      id: ip
      uses: haythem/public-ip@v1.3
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Deploy to production
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }}
        script_stop: true
        script: |
          cd /home/ec2-user/si-follow/react-frontend

          export GITHUB_USERNAME=${{ github.actor }}
          
          docker-compose down
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          docker-compose pull
          docker-compose up -d

          docker logout
          docker image prune -f

    - name: Remove Github Actions IP From Security Group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
